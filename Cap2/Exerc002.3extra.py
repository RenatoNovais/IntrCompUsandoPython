'''
# **Exerc√≠cios Adicionais sobre Strings**

# **1. Manipula√ß√£o B√°sica de Strings**
a) Escreva um programa que pe√ßa ao usu√°rio para digitar seu nome e sobrenome separadamente. Depois, concatene-os em uma √∫nica string e imprima:
    - O nome completo.
   - O nome completo em mai√∫sculas.
   - O nome completo em min√∫sculas.
   - O n√∫mero de caracteres no nome completo(sem contar espa√ßos).

'''
nome = input('Digite seu nome: ')
sobreNome = input('Digite seu sobrenome: ')
nomeCompleto = nome + ' ' + sobreNome
# usado f-string para imprimir as express√£o atrinbu√≠da as vari√°veis do input
print(f'Seu nome completo √© {nomeCompleto}')
# .replace(" ", "") ‚Üí Remove o espa√ßo, resultando em "RenatoNovais".
nomeCompletoSemEspaco = nomeCompleto.replace('', '')
print(len(nomeCompletoSemEspaco))
# len() ‚Üí Conta os caracteres restantes(9).


'''

    b) Escreva um programa que pe√ßa uma frase ao usu√°rio e imprima:
   - A primeira letra de cada palavra em mai√∫scula.
   - A frase invertida(de tr√°s para frente).
   - Quantas vezes a letra "a" aparece(mai√∫scula ou min√∫scula).

    ---

    #### **2. Fatiamento (Slicing) de Strings**
    a) Dada a string `s = "Programa√ß√£oPython"`, fa√ßa:
   - Imprima os 5 primeiros caracteres.
   - Imprima os √∫ltimos 4 caracteres.
   - Imprima do 3¬∫ ao 8¬∫ caractere.
   - Imprima a string pulando de 2 em 2 caracteres(ex.: "Porm√ß√£otn").

    b) Escreva um programa que pe√ßa uma palavra ao usu√°rio e:
   - Imprima apenas as letras nas posi√ß√µes pares(ex.: "Python" ‚Üí "Pto").
   - Imprima a palavra sem a primeira e a √∫ltima letra(ex.: "Computa√ß√£o" ‚Üí "omputa√ß√£").

    ---

    #### **3. Opera√ß√µes com Strings**
    a) Dada a string `frase = "Python √© incr√≠vel!"`, fa√ßa:
   - Substitua "incr√≠vel" por "poderoso".
   - Verifique se a palavra "Python" est√° na frase.
   - Divida a frase em uma lista de palavras.

    b) Escreva um programa que pe√ßa uma senha ao usu√°rio e verifique se:
   - A senha tem pelo menos 8 caracteres.
   - Cont√©m pelo menos um n√∫mero.
   - Cont√©m pelo menos uma letra mai√∫scula.

    ---

    #### **4. Formata√ß√£o de Strings**
    a) Crie uma string formatada que mostre o resultado da express√£o `3 * 5 + 2` no formato:
   `"3 * 5 + 2 = 17"` (use f-strings).

    b) Pe√ßa ao usu√°rio para digitar seu nome, idade e cidade. Imprima uma mensagem formatada como:
   `"Ol√°, [Nome]! Voc√™ tem [Idade] anos e mora em [Cidade]."`

    ---

    #### **5. Desafios**
a) ** Pal√≠ndromo**: Escreva um programa que verifique se uma palavra √© um pal√≠ndromo (igual de tr√°s para frente, como "arara").

b) ** Criptografia simples**: Crie um programa que substitua cada letra de uma palavra pela pr√≥xima no alfabeto (ex.: "abc" ‚Üí "bcd", "z" ‚Üí "a").

    ---

    Esses exerc√≠cios cobrem conceitos como:
    - Concatena√ß√£o e m√©todos de strings (`upper()`, `lower()`, `replace()`, `split()`).
    - Fatiamento (`slicing`).
    - Formata√ß√£o (`f-strings`).
    - Verifica√ß√£o de condi√ß√µes em strings.

    Se precisar de ajuda com algum deles ou quiser mais exerc√≠cios em algum t√≥pico espec√≠fico, √© s√≥ avisar! üòä
'''
